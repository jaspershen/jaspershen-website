<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rstudio | Xiaotao Shen</title>
    <link>https://jaspershen.github.io/category/rstudio/</link>
      <atom:link href="https://jaspershen.github.io/category/rstudio/index.xml" rel="self" type="application/rss+xml" />
    <description>Rstudio</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 10 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jaspershen.github.io/media/icon_hu805a85e690e4f2727bf7d5f685d888f7_86836_512x512_fill_lanczos_center_3.png</url>
      <title>Rstudio</title>
      <link>https://jaspershen.github.io/category/rstudio/</link>
    </image>
    
    <item>
      <title>Github多人协作</title>
      <link>https://jaspershen.github.io/post/2020-03-10-github-collobration/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://jaspershen.github.io/post/2020-03-10-github-collobration/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#创建远程仓库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 创建远程仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#本地创建分支并推送到远程仓库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 本地创建分支并推送到远程仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#邀请合作者&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 邀请合作者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#合作者参与项目&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 合作者参与项目&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#克隆项目&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; 克隆项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#开始工作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; 开始工作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#创建文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.1&lt;/span&gt; 创建文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#提交&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.2&lt;/span&gt; 提交&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#合并分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.3&lt;/span&gt; 合并分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#推送到远程仓库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.4&lt;/span&gt; 推送到远程仓库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#有冲突怎么办&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; 有冲突怎么办&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#抓取分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;7&lt;/span&gt; 抓取分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#多人协作的工作模式&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8&lt;/span&gt; 多人协作的工作模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;多个人共同合作进行一个项目,是git的一大优势.&lt;/p&gt;
&lt;p&gt;一般来说,共同合作,是其中某个人先建立一个repo仓库,然后克隆到本地,然后在本地创建分支,将分支推送到远程仓库,然后邀请合作者.&lt;/p&gt;
&lt;div id=&#34;创建远程仓库&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 创建远程仓库&lt;/h1&gt;
&lt;p&gt;在github创建远程仓库或者将本地仓库推送到远程仓库.这里就不在演示了.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;本地创建分支并推送到远程仓库&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 本地创建分支并推送到远程仓库&lt;/h1&gt;
&lt;p&gt;比如我们在&lt;code&gt;shenxt&lt;/code&gt;账户上有一个远程仓库,创建一个&lt;code&gt;jaspershen&lt;/code&gt;分支.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch jaspershen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后将该分支推送到远程仓库.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin jaspershen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候再去远程仓库就可以看到&lt;code&gt;jaspershen&lt;/code&gt;分支了.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;邀请合作者&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 邀请合作者&lt;/h1&gt;
&lt;p&gt;在github远程仓库的&lt;code&gt;setting&lt;/code&gt;中,点击&lt;code&gt;Manage access&lt;/code&gt;,然后点击&lt;code&gt;invite collarbortor&lt;/code&gt;,填入邀请人的ID即可.这时候邀请人可以在自己github中看到邀请,同意即可.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;合作者参与项目&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 合作者参与项目&lt;/h1&gt;
&lt;p&gt;合作者同意邀请之后,需要克隆项目,创建本地分支.&lt;/p&gt;
&lt;div id=&#34;克隆项目&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; 克隆项目&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github_jaspershen:shenxt/github_test4.git
cd github_test4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候查看分支,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会看到只有master分支.所以要创建远程仓库的分支到本地.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b jaspershen origin/jaspershen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候再查看分支,就会在&lt;code&gt;jaspershen&lt;/code&gt;分支了.这时候合作者jaspershen就可以在该分支下进行工作了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;开始工作&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; 开始工作&lt;/h1&gt;
&lt;p&gt;这时候合作者&lt;code&gt;jaspershen&lt;/code&gt;可以在分支下正常工作,然后提交,合并,并推送到远程仓库.&lt;/p&gt;
&lt;div id=&#34;创建文件&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.1&lt;/span&gt; 创建文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;touch heloworld.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在该文件下写入一行文字:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test from jaspershen&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;提交&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.2&lt;/span&gt; 提交&lt;/h2&gt;
&lt;p&gt;然后加入到暂存区并提交.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add helloworld.txt
git commit -m &amp;quot;test from jaspershen&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;合并分支&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.3&lt;/span&gt; 合并分支&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git merge jaspershen&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;推送到远程仓库&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.4&lt;/span&gt; 推送到远程仓库&lt;/h2&gt;
&lt;p&gt;然后可以将其推送到远程分支(包括master和jaspershen分支).注意是直接推送到&lt;code&gt;shenxt&lt;/code&gt;账户的远程仓库.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin master
git push origin jaspershen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候就可以在&lt;code&gt;shenxt&lt;/code&gt;的远程仓库下看到&lt;code&gt;jaspershen&lt;/code&gt;的提交工作了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;有冲突怎么办&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; 有冲突怎么办&lt;/h1&gt;
&lt;p&gt;多人协作是不免会有冲突,冲突的主要原因就是对同一文件的修改,所以最好是提前说好不要对同一个文件进行修改,如果有冲突,请参考:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.liaoxuefeng.com/wiki/896043488029600/900004111093344&#34; class=&#34;uri&#34;&gt;https://www.liaoxuefeng.com/wiki/896043488029600/900004111093344&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;抓取分支&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;7&lt;/span&gt; 抓取分支&lt;/h1&gt;
&lt;p&gt;多人协作时，大家都会往&lt;code&gt;master&lt;/code&gt;分支上推送各自的修改。如果两个人同时对同一个文件进行了修改,并且同试图推送到&lt;code&gt;master&lt;/code&gt;分支,那么就会冲突,报错.这时候,应该先使用&lt;code&gt;git pull&lt;/code&gt;命令将最新的提交从&lt;code&gt;origin/master&lt;/code&gt;下抓取下来,然后本地合并,解决冲突,再推送.&lt;/p&gt;
&lt;p&gt;比如我们在&lt;code&gt;shenxt&lt;/code&gt;账户下也创建一个&lt;code&gt;helloworld.txt&lt;/code&gt;文件.然后提交,推送到远程仓库.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会得到下面的报错:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ! [rejected]        master -&amp;gt; master (fetch first)
error: failed to push some refs to &amp;#39;git@github_shenxt:shenxt/github_test4.git&amp;#39;
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., &amp;#39;git pull ...&amp;#39;) before pushing again.
hint: See the &amp;#39;Note about fast-forwards&amp;#39; in &amp;#39;git push --help&amp;#39; for details.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们先使用&lt;code&gt;git pull&lt;/code&gt;抓取分支的最新提交.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也失败了,因为没有指定本地分支与远程&lt;code&gt;origin/xxx&lt;/code&gt;分支的链接，根据提示，设置本地分支和远程分支的链接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch --set-upstream-to=origin/master master
git branch --set-upstream-to=origin/jaspershen jaspershen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在pull.&lt;/p&gt;
&lt;p&gt;这回&lt;code&gt;git pull&lt;/code&gt;成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再&lt;code&gt;push&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;多人协作的工作模式&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;8&lt;/span&gt; 多人协作的工作模式&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;首先，可以试图用&lt;code&gt;git push origin &amp;lt;branch-name&amp;gt;&lt;/code&gt;推送自己的修改；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果推送失败，则因为远程分支比你的本地更新，需要先用&lt;code&gt;git pull&lt;/code&gt;试图合并；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果合并有冲突，则解决冲突，并在本地提交；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有冲突或者解决掉冲突后，再用&lt;code&gt;git push origin &amp;lt;branch-name&amp;gt;&lt;/code&gt;推送就能成功！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果&lt;code&gt;git pull&lt;/code&gt;提示&lt;code&gt;no tracking information&lt;/code&gt;，则说明本地分支和远程分支的链接关系没有创建，用命令&lt;code&gt;git branch --set-upstream-to &amp;lt;branch-name&amp;gt; origin/&amp;lt;branch-name&amp;gt;&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这就是多人协作的工作模式，一旦熟悉了，就非常简单。&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>git和GitHub使用</title>
      <link>https://jaspershen.github.io/post/2020-03-04-git_github/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://jaspershen.github.io/post/2020-03-04-git_github/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#git配置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Git配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装git之后需要进行一些全局设置比如用户名邮箱.&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 安装git之后,需要进行一些全局设置,比如用户名邮箱.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#除了用户名邮箱之外也可以对其他内容进行配置如&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 除了用户名邮箱之外,也可以对其他内容进行配置,如:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#查看所有的配置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; 查看所有的配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#基础操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 基础操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#创建本地git版本库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 创建本地git版本库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#将文件添加到版本库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 将文件添加到版本库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#使用git-add命令将文件添加到暂存区&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.1&lt;/span&gt; 使用&lt;code&gt;git add&lt;/code&gt;命令将文件添加到暂存区:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用git-commit命令将暂存区文件提交到仓库中.&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.2&lt;/span&gt; 使用&lt;code&gt;git commit&lt;/code&gt;命令将暂存区文件提交到仓库中.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#查看仓库状态&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; 查看仓库状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#查看仓库中的具体修改&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4&lt;/span&gt; 查看仓库中的具体修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#查看提交的历史记录&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.5&lt;/span&gt; 查看提交的历史记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#版本回退&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.6&lt;/span&gt; 版本回退&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#回到未来某个版本&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.7&lt;/span&gt; 回到未来某个版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#撤销修改&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.8&lt;/span&gt; 撤销修改&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#丢弃工作区中的文件修改&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.8.1&lt;/span&gt; 丢弃工作区中的文件修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#丢弃暂存区的修改&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.8.2&lt;/span&gt; 丢弃暂存区的修改&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#删除文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.9&lt;/span&gt; 删除文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git的分支管理&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; git的分支管理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#查看分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; 查看分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; 创建分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#切换分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3&lt;/span&gt; 切换分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#switch命令&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.4&lt;/span&gt; &lt;code&gt;switch&lt;/code&gt;命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#合并分支merge&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.5&lt;/span&gt; 合并分支(merge)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#删除分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.6&lt;/span&gt; 删除分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#分支提交冲突&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.7&lt;/span&gt; 分支提交冲突&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#分支策略&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.8&lt;/span&gt; 分支策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#远程仓库github&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 远程仓库(GitHub)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#添加到远程仓库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; 添加到远程仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#推送到远程仓库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; 推送到远程仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#从远程仓库获取最新内容&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.3&lt;/span&gt; 从远程仓库获取最新内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#查看远程仓库信息&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.4&lt;/span&gt; 查看远程仓库信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#从远程仓库克隆&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.5&lt;/span&gt; 从远程仓库克隆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#设置忽略文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; 设置忽略文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;git配置&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Git配置&lt;/h1&gt;
&lt;div id=&#34;安装git之后需要进行一些全局设置比如用户名邮箱.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 安装git之后,需要进行一些全局设置,比如用户名邮箱.&lt;/h2&gt;
&lt;p&gt;设置的主要命令是&lt;code&gt;git config&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;your name&amp;quot; 
git config --global user.email &amp;quot;your email&amp;quot; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中,&lt;code&gt;--global&lt;/code&gt;是指全局配置,如果不写,则只为当前仓库(repository)配置.&lt;/p&gt;
&lt;p&gt;如果有多个git用户,这时候需要先确定某个仓库使用的哪个账户.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config user.name
git config user.email &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查询全局的git账户信息:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name
git config --global user.email &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;除了用户名邮箱之外也可以对其他内容进行配置如&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 除了用户名邮箱之外,也可以对其他内容进行配置,如:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git config --global color.ui true #让git显示不同的颜色
git config cor.ignorcase true #让git对仓库中文件大小写敏感&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;查看所有的配置&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; 查看所有的配置&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git config -l&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;基础操作&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 基础操作&lt;/h1&gt;
&lt;div id=&#34;创建本地git版本库&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 创建本地git版本库&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;git init&lt;/code&gt;命令.&lt;/p&gt;
&lt;p&gt;首先,创建一个你要当作仓库的文件夹,然后将其设置为工作路径,然后执行.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir git_test
cd git_test
git init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20101100.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这时候查看目录结构,就可以看到创建了一个名为&lt;code&gt;.git&lt;/code&gt;的子目录,这就说明创建版本库成功了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20101400.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;将文件添加到版本库&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 将文件添加到版本库&lt;/h2&gt;
&lt;p&gt;要将一个文件纳入到版本管理,首先需要将其添加到暂存区,然后才能提交到仓库中.&lt;/p&gt;
&lt;div id=&#34;使用git-add命令将文件添加到暂存区&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.1&lt;/span&gt; 使用&lt;code&gt;git add&lt;/code&gt;命令将文件添加到暂存区:&lt;/h3&gt;
&lt;p&gt;比如我们首先新建一个名为&lt;code&gt;README.md&lt;/code&gt;的文件,然后将其添加到暂存区.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add README.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然也可以使用下面命令将所有修改添加到暂存区:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; 是正则表达式,代表任意文件.但是空文件夹是不会添加到暂存区的.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;使用git-commit命令将暂存区文件提交到仓库中.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.2&lt;/span&gt; 使用&lt;code&gt;git commit&lt;/code&gt;命令将暂存区文件提交到仓库中.&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git commit #如果暂存区有文件,则将其中的文件提交到仓库
git commit -m &amp;quot;your note for this commit&amp;quot; #用于注明提交的内容,变更等信息,方便溯源&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20102352.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果直接使用&lt;code&gt;git commit&lt;/code&gt;提交,不带注释信息,则会先弹出评论界面,需要评论.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20102751.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意这时候是使用vi打开的文件,所以需要掌握一点vi的基础知识.参考下面帖子:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/itech/archive/2009/04/17/1438439.html&#34; class=&#34;uri&#34;&gt;https://www.cnblogs.com/itech/archive/2009/04/17/1438439.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说,首先在命令行模式下按下字母&lt;code&gt;i&lt;/code&gt;进入插入模式,在该模式下进行信息的输入.输入结束之后,点击&lt;code&gt;ESC&lt;/code&gt;退回到命令行模式,然后再输入冒号(&lt;code&gt;:&lt;/code&gt;).输入w,回车,保存,然后输入q,回车,退出vi编辑器.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;查看仓库状态&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; 查看仓库状态&lt;/h2&gt;
&lt;p&gt;不论我们是新建了文件,将文件加入暂存区,或者是其他修改等,我们都可以使用&lt;code&gt;git status&lt;/code&gt;来查看当前的仓库状态.&lt;/p&gt;
&lt;p&gt;如果当前没有任何变动.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20103831.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果我们新建了一个文件,然后再次查看状态:&lt;/p&gt;
&lt;p&gt;因为我们还没有将其添加到暂存区,因此显示该新建文件为 &lt;code&gt;Untracted files&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20103937.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将文件放入暂存区,然后再查看状态:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20104126.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后再将其进行提交,查看状态.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20104709.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;查看仓库中的具体修改&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; 查看仓库中的具体修改&lt;/h2&gt;
&lt;p&gt;如果做过之后修改,我们忘了做了哪些修改,可以使用&lt;code&gt;git diff&lt;/code&gt;命令来查看具体修改内容.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff #查看所有改动
git diff README.md #查看具体文件的改动&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比如我们再&lt;code&gt;test.txt&lt;/code&gt;文件中加入一行,然后查看:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20105306.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到记录了对该文件的修改内容.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意,如果你修改之后已经将其存入暂存区,则&lt;code&gt;git diff&lt;/code&gt;不会再显示内容.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20105454.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;查看提交的历史记录&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.5&lt;/span&gt; 查看提交的历史记录&lt;/h2&gt;
&lt;p&gt;有的时候,你需要查看自己做过哪些提交(commit),来回顾自己的完成部分,这时候需要使用&lt;code&gt;git log&lt;/code&gt;命令.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log     #显示所有提交的历史记录
git log --pretty=oneline    #单行显示提交历史记录的内容&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20105927.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到我们现在一共进行了4次提交,每次提交的第一行commit之后是该次提交的唯一&lt;code&gt;ID&lt;/code&gt;.然后后面显示提交者,时间以及一些记录等.&lt;/p&gt;
&lt;p&gt;如果提交非常多,需要显示内容精简一些,就需要使用&lt;code&gt;git log --pretty=oneline&lt;/code&gt;命令.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20110141.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;版本回退&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.6&lt;/span&gt; 版本回退&lt;/h2&gt;
&lt;p&gt;有了&lt;code&gt;git log&lt;/code&gt;来查看提交的历史记录,我们就可以通过&lt;code&gt;git reset --hard&lt;/code&gt;来退回到我们需要的某个特定把呢不能.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard HEAD^        # 回退到上一个提交版本
git reset --hard HEAD^^        # 回退到上上一个提交版本
git reset --hard &amp;#39;commit_id&amp;#39;    # 会退到 commit_id 指定的提交版本&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;git log&lt;/code&gt;我们可以看到每个提交都有一个唯一的commit ID,其中上一个也可以使用&lt;code&gt;HEAD&lt;/code&gt;代表.因此我们可以退回到上一个版本.比如,我们在最近的一次提交中修改了test.txt,在其中加入一行.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20110543.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们想退回到上一个版本,不想加入这一行,可以使用下面命令.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候再查看log,可以看到最近的一个commit已经消失,回到了上一个提交.而上一次的修改也已经消失.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20110857.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;回到未来某个版本&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.7&lt;/span&gt; 回到未来某个版本&lt;/h2&gt;
&lt;p&gt;退回到原来某个版本之后,如何再回到未来某个版本呢?还是使用&lt;code&gt;git reset --hard&lt;/code&gt;命令,但是此时使用&lt;code&gt;git log&lt;/code&gt;命令是无法显示在这之后的提交信息的。但是，通过&lt;code&gt;git reflog&lt;/code&gt;可以获取到操作命令的历史。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20111241.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这时候只要在使用&lt;code&gt;git reset&lt;/code&gt;命令就可以回到未来的任意一个版本了.而且这时候再使用&lt;code&gt;git log&lt;/code&gt;也回到了最初的版本提交记录.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20111622.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;撤销修改&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.8&lt;/span&gt; 撤销修改&lt;/h2&gt;
&lt;p&gt;撤销修改同样包括两方面的内容，由于仓库中的文件在提交之前，可能在工作区中(也就是还未运行 &lt;code&gt;git add&lt;/code&gt;命令)，尚未在版本控制范围内，也可能在暂存区中(也就是运行了&lt;code&gt;git add&lt;/code&gt;命令但是没有运行&lt;code&gt;git commit .&lt;/code&gt;命令)。&lt;/p&gt;
&lt;div id=&#34;丢弃工作区中的文件修改&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.8.1&lt;/span&gt; 丢弃工作区中的文件修改&lt;/h3&gt;
&lt;p&gt;使用如下命令.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -- READ.md    #如果 READ.md 文件在工作区，则丢弃其修改
git checkout -- .            #丢弃当前目录下所有工作区中文件的修改&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比如我们再&lt;code&gt;test.txt&lt;/code&gt;中添加另外一行,然后不加入暂存区,然后将其丢弃掉.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20112427.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后运行:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -- test.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20112527.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;丢弃暂存区的修改&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.8.2&lt;/span&gt; 丢弃暂存区的修改&lt;/h3&gt;
&lt;p&gt;如果已经运行了&lt;code&gt;git add&lt;/code&gt;将修改放入了暂存区,可以通过下列命令进行丢弃:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset HEAD README.md #将 README.md 恢复到 HEAD 提交版本的状态
git checkout -- README.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20112956.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后将其删除掉.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20113351.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;删除文件&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.9&lt;/span&gt; 删除文件&lt;/h2&gt;
&lt;p&gt;在文件未添加到暂存区之前,对想删除文件可以直接物理删除.或者通过&lt;code&gt;git checkout -- file&lt;/code&gt;来丢弃.如果文件已经被提交,则需要&lt;code&gt;git rm&lt;/code&gt;来删除.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm Readme.md #删除已经提交(commit)过的文件&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: &lt;code&gt;git rm&lt;/code&gt;只能删除已经提交到版本库中的文件.其他状态的文件直接用这个命令操作是出错的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20204036.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;git的分支管理&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; git的分支管理&lt;/h1&gt;
&lt;p&gt;分支管理是版本管理中的重要概念.在进行多个并行作业时,我们经常会用到分支.在这类并行开发的过程中,往往同时存在着多个最新的代码状态.&lt;/p&gt;
&lt;p&gt;master分支时git默认创建的分支.因此基本上所有的开发都是以这个分支为中心进行的.&lt;/p&gt;
&lt;p&gt;在不同分支中,可以同时进行不同的作业,等该分支的作业完成之后,再与master分支进行合并.&lt;/p&gt;
&lt;p&gt;比如下图中,我们首先以master作为模板复制得到&lt;code&gt;feature A&lt;/code&gt;的分支.&lt;code&gt;feature A&lt;/code&gt;分支主要用来开发另外一个新的特性,等开发完毕之后,再将其合并到master分支中即可.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20205634.png&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;查看分支&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; 查看分支&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;git branch&lt;/code&gt;命令查看分支信息.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch        #查看本地分支信息
git branch -v     #查看相对详细的本地分支信息
git branch -av     #查看包括远程仓库在内的分支信息&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20210006.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到我们现在只有一个分支,也就是master,然后星号标识的就是当前所在的分支.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;创建分支&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; 创建分支&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;git branch new.name&lt;/code&gt;用来创建新的分支.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch development ##创建一个新的名字叫做development的分支&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是,在哪个分支下面新建分支,则该分支就是copy自当前所在的分支.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;切换分支&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; 切换分支&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;git checkout&lt;/code&gt;命令来切换分支.比如我们先新建一个development的分支,然后切换到该分支下.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch development
git checkout development&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然也可以使用下面命令直接创建并切换到新建的分支下.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b development&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;switch命令&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; &lt;code&gt;switch&lt;/code&gt;命令&lt;/h2&gt;
&lt;p&gt;我们注意到切换分支使用&lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt;,而前面讲过的撤销修改则是&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;,同一个命令,有两种作用,确实有点令人迷惑.&lt;/p&gt;
&lt;p&gt;实际上,切换分支这个动作,用&lt;code&gt;switch&lt;/code&gt;更科学。因此，最新版本的Git提供了新的&lt;code&gt;git switch&lt;/code&gt;命令来切换分支：&lt;/p&gt;
&lt;p&gt;创建并切换到新的development分支,可以使用:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git switch -c development &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接切换到已有分支:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git switch master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20210500.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们下面在development分支下面再新建一个&lt;code&gt;development.txt&lt;/code&gt;文件,然后写入一些内容.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20211512.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到此时有一个新建的development.txt文件.如果我们切换到master分支,还是有该文件,但是对该文件内容进行修改,则因为没有加入到暂存区,因此并不会进行版本控制.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;合并分支merge&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; 合并分支(merge)&lt;/h2&gt;
&lt;p&gt;当我们修复完成一个Bug,或者开发完成一个新特性,我们就会把相关的Bug或者特性的上修改合并回原来的主分支上.,这时候就需要&lt;code&gt;git merge&lt;/code&gt;命令来做分支的合并.&lt;/p&gt;
&lt;p&gt;首先需要切换回最终需要合并的分支,也就是&lt;code&gt;master&lt;/code&gt;分支,然后再合并.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master        #切换回 master 分支
git merge development     #将development分支中的修改合并回master分支&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20212532.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;删除分支&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6&lt;/span&gt; 删除分支&lt;/h2&gt;
&lt;p&gt;当之前创建的分支,完成了它的使命,如Bug修复完,分支合并以后,这个分支就不在需要了,就可以删除它.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch -d development #删除development分支&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果分支没有合并到master分支中,直接使用上面命令会报错,可以使用下面的命令强制删除.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch -D development&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;分支提交冲突&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.7&lt;/span&gt; 分支提交冲突&lt;/h2&gt;
&lt;p&gt;如果新创建了一个分支&lt;code&gt;develpment&lt;/code&gt;,然后在该分支下对&lt;code&gt;readme.txt&lt;/code&gt;进行修改,然后提交.&lt;/p&gt;
&lt;p&gt;随后然后切换到&lt;code&gt;master&lt;/code&gt;分支,然后也对&lt;code&gt;readme.txt&lt;/code&gt;进行修改,然后也提交.&lt;/p&gt;
&lt;p&gt;这样,两个分支分别有了不同的提交.这种情况下,再进行合并就会有冲突.&lt;/p&gt;
&lt;p&gt;我们合并一下试试:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![](Screen Shot 2020-03-11 at 9.20.30 PM.png)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到报错,Git告诉我们,&lt;code&gt;readme.txt&lt;/code&gt;文件存在冲突,必须手动解决冲突后再提交.&lt;code&gt;git status&lt;/code&gt;也可以告诉我们冲突的文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Screen%20Shot%202020-03-11%20at%209.25.20%20PM.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这时候我们可以使用&lt;code&gt;vi&lt;/code&gt;或者其他工具打开冲突的文件,在这就是&lt;code&gt;readme.txt&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Screen%20Shot%202020-03-11%20at%209.32.06%20PM.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Git用&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;，&lt;code&gt;=======&lt;/code&gt;，&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;标记出不同分支的内容，我们修改如下后保存：&lt;/p&gt;
&lt;p&gt;我们将这些记号删除,然后保留自己想要保留的修改就可.然后重新提交.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit-m &amp;#39;remove conflict&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候就完成了合并.可以删除development分支了.&lt;/p&gt;
&lt;p&gt;这时候使用&lt;code&gt;git log&lt;/code&gt;也可以看到分支的提交情况.使用&lt;code&gt;git log --graph&lt;/code&gt;可以观察分支合并图.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;分支策略&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.8&lt;/span&gt; 分支策略&lt;/h2&gt;
&lt;p&gt;在实际开发中，我们应该按照几个基本原则进行分支管理：&lt;/p&gt;
&lt;p&gt;首先，&lt;code&gt;master&lt;/code&gt;分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；&lt;/p&gt;
&lt;p&gt;那在哪干活呢？干活都在&lt;code&gt;dev&lt;/code&gt;分支上，也就是说，&lt;code&gt;dev&lt;/code&gt;分支是不稳定的，到某个时候，比如&lt;code&gt;1.0&lt;/code&gt;版本发布时，再把&lt;code&gt;dev&lt;/code&gt;分支合并到&lt;code&gt;master&lt;/code&gt;上，在&lt;code&gt;master&lt;/code&gt;分支发布1.0版本；&lt;/p&gt;
&lt;p&gt;你和你的小伙伴们每个人都在&lt;code&gt;dev&lt;/code&gt;分支上干活，每个人都有自己的分支，时不时地往&lt;code&gt;dev&lt;/code&gt;分支上合并就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;远程仓库github&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 远程仓库(GitHub)&lt;/h1&gt;
&lt;p&gt;上面的所有命令都是针对本地仓库的操作.当我们希望多个人来协作时,会将代码发布到一个统一的远程仓库,然后多个人在本地操作以后,再推送到远程仓库.其他人协作时,需要先同步远程仓库的内容,再推送自己的修改.这就要用到了我们最常用的github.&lt;/p&gt;
&lt;div id=&#34;添加到远程仓库&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; 添加到远程仓库&lt;/h2&gt;
&lt;p&gt;比如我们上面所建立的&lt;code&gt;git_test&lt;/code&gt;本地仓库,我们需要将其添加到github的远程仓库中.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin your_remote_git_repo #为本地仓库添加远程仓库&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;code&gt;your_remote_git_repo&lt;/code&gt;是再github中创建的.我们先创建一下,然后进行尝试.&lt;/p&gt;
&lt;p&gt;格式为&lt;code&gt;git@github.com:user.name/repo_name&lt;/code&gt;.
当然,也可以直接使用远程仓库的网址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jaspershen/git_test&#34; class=&#34;uri&#34;&gt;https://github.com/jaspershen/git_test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20213542.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;推送到远程仓库&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; 推送到远程仓库&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;git push&lt;/code&gt;将本地仓库的内容推送到远程仓库.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push -u origin master #第一次推送时使用,可以简化后面的推送或者拉取命令使用
git push origin master #将本地master分支推送到origin远程分支,后面之后就可以直接使用该命令推送&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20214807.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以后再推送的时候,就使用&lt;code&gt;git push&lt;/code&gt;就可以了.&lt;/p&gt;
&lt;p&gt;这时候可以看到github中已经有了内容.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Annotation%202020-03-04%20214930.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;从远程仓库获取最新内容&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.3&lt;/span&gt; 从远程仓库获取最新内容&lt;/h2&gt;
&lt;p&gt;在多人协作过程中,当自己完成了本地仓库中的提交,想要向远程仓库推送前,需要先获取到远程仓库的最新内容。&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;git fetch&lt;/code&gt;和&lt;code&gt;git pull&lt;/code&gt;来获取远程仓库的内容.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git fetch origin master    
git pull origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两者之间的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git fetch&lt;/code&gt;是仅仅获取远程仓库的更新内容,并不会自动做合并.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;在获取远程仓库的内容后,会自动做合并,可以看成&lt;code&gt;git fetch&lt;/code&gt;之后&lt;code&gt;git merge&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;查看远程仓库信息&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.4&lt;/span&gt; 查看远程仓库信息&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;从远程仓库克隆&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.5&lt;/span&gt; 从远程仓库克隆&lt;/h2&gt;
&lt;p&gt;如果你本地没有仓库,希望从已有的远程仓库上复制一份代码,那么你需要&lt;code&gt;git clone&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jaspershen/git_test #通过 https 协议,克隆Github上git仓库的源码
git clone jaspershen@github.com/git/git_test #通过ssh协议,克隆Github上git仓库的源码&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;设置忽略文件&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; 设置忽略文件&lt;/h1&gt;
&lt;p&gt;有时候仓库中的某些文件或者文件夹并不需要进行同步,这时候可以通过设置忽略文件&lt;code&gt;.gitignore&lt;/code&gt;进行管理.&lt;/p&gt;
&lt;p&gt;参考帖子:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/onlynight/ReadmeDemo/tree/master/Readmes/GitIgnore&#34; class=&#34;uri&#34;&gt;https://github.com/onlynight/ReadmeDemo/tree/master/Readmes/GitIgnore&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R下载数据</title>
      <link>https://jaspershen.github.io/post/2020-02-21-introduction_to_metagenomics/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://jaspershen.github.io/post/2020-02-21-introduction_to_metagenomics/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#使用命令打开网页&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 使用命令打开网页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#下载2019-new-coronaverus数据&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 下载2019 new-Coronaverus数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;在看余光创教授的一个包,把一些学到的内容记录下来.&lt;/p&gt;
&lt;div id=&#34;使用命令打开网页&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 使用命令打开网页&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  url &amp;lt;- &amp;#39;https://baidu.com&amp;#39;
  utils::browseURL(url)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;下载2019-new-coronaverus数据&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 下载2019 new-Coronaverus数据&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; url &amp;lt;- &amp;#39;https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&amp;amp;callback=1580373566110&amp;#39;
  x &amp;lt;- suppressWarnings(readLines(url, encoding = &amp;quot;UTF-8&amp;quot;))
  x &amp;lt;- sub(pattern = &amp;quot;^\\d+\\(&amp;quot;, replacement = &amp;quot;&amp;quot;, x = x)
  x &amp;lt;- sub(pattern = &amp;quot;\\)$&amp;quot;, replacement = &amp;quot;&amp;quot;, x = x)
  y &amp;lt;- jsonlite::fromJSON(txt = x)
  z &amp;lt;- jsonlite::fromJSON(txt = y$data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;z是一个list,里面包含了所有的信息.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;lastUpdateTime&amp;quot;     &amp;quot;chinaTotal&amp;quot;         &amp;quot;chinaAdd&amp;quot;          
##  [4] &amp;quot;isShowAdd&amp;quot;          &amp;quot;showAddSwitch&amp;quot;      &amp;quot;areaTree&amp;quot;          
##  [7] &amp;quot;chinaDayList&amp;quot;       &amp;quot;chinaDayAddList&amp;quot;    &amp;quot;dailyNewAddHistory&amp;quot;
## [10] &amp;quot;dailyHistory&amp;quot;       &amp;quot;wuhanDayList&amp;quot;       &amp;quot;articleList&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z$chinaTotal&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $confirm
## [1] 78196
## 
## $heal
## [1] 29858
## 
## $dead
## [1] 2718
## 
## $nowConfirm
## [1] 45620
## 
## $suspect
## [1] 2491
## 
## $nowSevere
## [1] 8752&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z$chinaAdd&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $confirm
## [1] 6
## 
## $heal
## [1] 83
## 
## $dead
## [1] 0
## 
## $nowConfirm
## [1] -77
## 
## $suspect
## [1] 0
## 
## $nowSevere
## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z$lastUpdateTime&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2020-02-27 00:32:14&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>使用pkgdown为自己的R包创建说明网站</title>
      <link>https://jaspershen.github.io/post/2020-01-08-r-pkgdown/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://jaspershen.github.io/post/2020-01-08-r-pkgdown/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建网站&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 创建网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#主页home-page&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 主页(Home page)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#文章article&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 文章(Article)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新闻news&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; 新闻(NEWS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#发布&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; 发布&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;使用&lt;code&gt;pkgdown&lt;/code&gt;包可以为自己的R包创建说明网站,从而更加方便别人对自己包的立即以及自己对包的管理.&lt;/p&gt;
&lt;p&gt;参考网址如下:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkgdown.r-lib.org/index.html&#34; class=&#34;uri&#34;&gt;https://pkgdown.r-lib.org/index.html&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;安装&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Install release version from CRAN
install.packages(&amp;quot;pkgdown&amp;quot;)
# Install development version from GitHub
devtools::install_github(&amp;quot;r-lib/pkgdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;创建网站&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 创建网站&lt;/h1&gt;
&lt;p&gt;在包的根目录下运行下列代码来创建网站.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pkgdown::build_site()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;主页home-page&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 主页(Home page)&lt;/h1&gt;
&lt;p&gt;主页的内容来自于&lt;code&gt;README.md&lt;/code&gt;或者&lt;code&gt;index.md&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;文章article&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 文章(Article)&lt;/h1&gt;
&lt;p&gt;pkgdown自动的将&lt;code&gt;vignettes&lt;/code&gt;文件夹中的所有的&lt;code&gt;md&lt;/code&gt;文件转变为aritcles.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;新闻news&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; 新闻(NEWS)&lt;/h1&gt;
&lt;p&gt;在根目录下创建&lt;code&gt;NEWS.md&lt;/code&gt;文件,然后就会在&lt;code&gt;Changelog&lt;/code&gt;页面下显示.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;发布&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; 发布&lt;/h1&gt;
&lt;p&gt;最简单的方式是在github网页的&lt;code&gt;setting&lt;/code&gt;中,直接将&lt;code&gt;docs&lt;/code&gt;选为github pages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure1.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Rstudio shortcut总结</title>
      <link>https://jaspershen.github.io/post/2019-12-23-rstudio-shortcut/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://jaspershen.github.io/post/2019-12-23-rstudio-shortcut/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tab标签&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Tab(标签)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#panes窗口窗格&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Panes(窗口,窗格)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#files文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Files(文件)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#source-navigation导航&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Source Navigation(导航)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Rstudio快捷键总结,仅限于windows.&lt;/p&gt;
&lt;p&gt;完整版可以在Rstudio &lt;code&gt;Help&lt;/code&gt;找到.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;file:///D:/software/R/RStudio/www/docs/keyboard.htm&#34; class=&#34;uri&#34;&gt;file:///D:/software/R/RStudio/www/docs/keyboard.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure2.png&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;tab标签&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Tab(标签)&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Tab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换到下一个标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+Tab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换到上一个标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换到第一个标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换到最后一个标签&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;panes窗口窗格&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Panes(窗口,窗格)&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标转移到&lt;code&gt;Source&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标转移到&lt;code&gt;Console&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标转移到&lt;code&gt;Help&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+4&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;History&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Files&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Plot&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+7&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Packages&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+8&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Enviorment&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Viewer&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+F1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;版本控制&lt;code&gt;Git&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+F2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Build&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Connection&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Shift+Alt+T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标转移到&lt;code&gt;Terminal&lt;/code&gt;窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;上面所有的快捷键,加上&lt;code&gt;Shift&lt;/code&gt;之后,会最大化该窗口.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;files文件&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Files(文件)&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;保存当前文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Alt+S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;保存所有文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;新建R script文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+O&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打开文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭当前文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+Alt+W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭除当前文件之外的所有文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭除所有文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在某个文件夹下的所有文件中进行搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;source-navigation导航&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Source Navigation(导航)&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+F9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;后退?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+F10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前进?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在当前文件中寻找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;F3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找下一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Shift+F3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找前一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+J&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找和替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快速到达一个文件或者函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Shift+Alt+G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快速到达文件的某一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Shift+Alt+J&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快速跳转到其他部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Shift+0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;展示文档的outline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Alt+Up&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在当前光标的上方添加光标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Ctrl+Alt+Down&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在当前光标的下方添加光标&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Metabolic health center conference</title>
      <link>https://jaspershen.github.io/post/2020-02-28-metabolic-health-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaspershen.github.io/post/2020-02-28-metabolic-health-center/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#christopher-newgard&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Christopher Newgard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Clinical Metabolomics&lt;/p&gt;
&lt;div id=&#34;christopher-newgard&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Christopher Newgard&lt;/h1&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
